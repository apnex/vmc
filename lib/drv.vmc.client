#!/bin/bash
if [ -z ${WORKDIR} ]; then
	if [[ $0 =~ ^(.*)/[^/]+$ ]]; then
		WORKDIR=${BASH_REMATCH[1]}
	fi
fi
if [ -z ${SDDCDIR} ]; then
	SDDCDIR=${WORKDIR}
fi
VMCSTATE="${WORKDIR}/state"
if [ ! -d ${VMCSTATE} ]; then
	mkdir ${VMCSTATE}
fi
DOMAIN=$(cat ${SDDCDIR}/sddc.parameters | jq -r '.domain')
VMCTOKEN=$(cat ${SDDCDIR}/sddc.parameters | jq -r '.endpoints[] | select(.type=="vmc").token')
VMCORG=$(cat ${SDDCDIR}/sddc.parameters | jq -r '.endpoints[] | select(.type=="vmc").org')
VMCONLINE=$(cat ${SDDCDIR}/sddc.parameters | jq -r '.endpoints[] | select(.type=="vmc").online')
VMCSESSION="${VMCSTATE}/vmc.csp-auth-token"
VMCBASE="https://vmc.vmware.com/vmc/api/"

function isSuccess {
	local STRING=${1}
	if [[ $STRING =~ ^(.*)([0-9]{3})$ ]]; then
		local BODY=${BASH_REMATCH[1]}
		local CODE=${BASH_REMATCH[2]}
	fi
	printf "[$(ccyan "${CODE}")] - " 1>&2
	if [[ $CODE =~ 2..$ ]]; then
		printf "SUCCESS\n" 1>&2
	else
		printf "ERROR\n" 1>&2
	fi
	printf "%s\n" "${BODY}"
}

function getCode {
	local STRING=${1}
	if [[ $STRING =~ ^(.*)([0-9]{3})$ ]]; then
		local BODY=${BASH_REMATCH[1]}
		local CODE=${BASH_REMATCH[2]}
	fi
	printf "%s\n" "${CODE}"
}

function vmcGet {
	local URL=${1}
	if [[ "$VMCONLINE" == "true" ]]; then
		local FILE=$(getFile "${URL}" "${VMCBASE}")
		STATE="${VMCSTATE}/vmc${FILE}"
		RESPONSE=$(curl -s -w "%{http_code}" -X GET \
			-H "Content-Type: application/json" \
			-H "csp-auth-token: $(cat ${VMCSESSION})" \
		"$URL" 2>/dev/null)
		RESULT=$(isSuccess "${RESPONSE}")
	else
		printf "[$(ccyan "OFFLINE")] - SUCCESS\n" 1>&2
		RESULT=$(cat "${URL}")
		STATE="${URL}"
	fi
	printf "%s\n" "${RESULT}" | jq --tab . >"${STATE}"
	printf "%s\n" "${RESULT}" | jq --tab .
}

function vmcPost {
	local URL=${1}
	local BODY=${2}
	if [[ "$VMCONLINE" == "true" ]]; then
		RESPONSE=$(curl -s -w "%{http_code}" -X POST \
			-H "Content-Type: application/json" \
			-H "csp-auth-token: $(cat ${VMCSESSION})" \
			-d "$BODY" \
		"$URL" 2>/dev/null)
		RESULT=$(isSuccess "${RESPONSE}")
	else
		printf "[$(ccyan "OFFLINE")] - SUCCESS\n" 1>&2
	fi
	printf "%s\n" "${RESULT}" | jq --tab .
}

function vmcDelete {
	local URL=${1}
	local BODY=${2}
	if [[ "$VMCONLINE" == "true" ]]; then
		#STATE=$(getFile "${URL}")
		RESPONSE=$(curl -s -w "%{http_code}" -G -X DELETE \
			-H "Content-Type: application/json" \
			-H "csp-auth-token: $(cat ${VMCSESSION})" \
			--data-urlencode "$BODY" \
		"$URL" 2>/dev/null)
		RESULT=$(isSuccess "${RESPONSE}")
	else
		printf "[$(ccyan "OFFLINE")] - SUCCESS\n" 1>&2
	fi
	#work out state synch for deletes
	printf "%s\n" "${RESULT}" | jq --tab .
}

function vmcLogin {
	local URL="https://console.cloud.vmware.com/csp/gateway/am/api/auth/api-tokens/authorize"
	local RESPONSE=$(curl -s -w "%{http_code}" -X POST \
		-H "accept: application/json" \
		-H "content-type: application/x-www-form-urlencoded" \
		-d "refresh_token=${VMCTOKEN}" \
	$URL)
	local RESULT=$(isSuccess "${RESPONSE}")
	local CODE=$(getCode "${RESPONSE}")
	if [[ $CODE =~ 2..$ ]]; then
		ACCESS_TOKEN=$(echo $RESULT | jq -r '.access_token')
		printf "%s\n" "${ACCESS_TOKEN}"
	fi
}

function vmcSession {
	local SESSION=$VMCSESSION
	local ONLINE=$VMCONLINE
	if [[ "$ONLINE" == "true" ]]; then
		local RUNFIND="$(find ${SESSION} -mmin -10 2>/dev/null)"
		if [[ -z ${RUNFIND} ]]; then
			printf "No valid session found, authenticating... " 1>&2
			local LOGIN=$(vmcLogin)
			if [[ -n ${LOGIN} ]]; then
				echo "${LOGIN}" >"$SESSION"
			fi
		fi
	fi
	printf "%s\n" "$(cat "${SESSION}" 2>/dev/null)"
}

function buildURL {
	local ENDPOINT="${1}"
	local BASE="${VMCBASE}"
	local STATE="${VMCSTATE}"
	local ONLINE="${VMCONLINE}"
	if [[ "$ONLINE" == "true" ]]; then
		local SUCCESS=$(vmcSession)
		if [[ -n ${SUCCESS} ]]; then
			URL="$BASE$ENDPOINT"
		else
			URL="" #failed to obtain valid session
		fi
	else
		local FILE=$(getFile "${ENDPOINT}" "${BASE}")
		URL="${STATE}/vmc${FILE}"
	fi
	printf "$URL"
}
