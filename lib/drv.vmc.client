#!/bin/bash
# check env and dirs
VMCSTATE="${WORKDIR}/state"
if [ ! -d ${VMCSTATE} ]; then
	mkdir ${VMCSTATE}
fi
if [ -z ${SDDCDIR} ]; then
	SDDCDIR=${WORKDIR}
fi
DOMAIN=$(cat ${SDDCDIR}/sddc.parameters | jq -r '.domain')
VMCTOKEN=$(cat ${SDDCDIR}/sddc.parameters | jq -r '.endpoints[] | select(.type=="vmc").token')
VMCORG=$(cat ${SDDCDIR}/sddc.parameters | jq -r '.endpoints[] | select(.type=="vmc").org')
VMCONLINE=$(cat ${SDDCDIR}/sddc.parameters | jq -r '.endpoints[] | select(.type=="vmc").online')
VMCSESSION="${VMCSTATE}/vmc.csp-auth-token"

# Login with refresh-token and store Access token for future calls
function vmcLogin {
	URL="https://console.cloud.vmware.com/csp/gateway/am/api/auth/api-tokens/authorize"
	AUTH_RESPONSE=$(curl -s -X POST \
		-H "accept: application/json" \
		-H "content-type: application/x-www-form-urlencoded" \
		-d "refresh_token=$VMCTOKEN" \
	$URL)
	ACCESS_TOKEN=$(echo $AUTH_RESPONSE | awk -F '"access_token":"' '{print $2}' | awk -F '","' '{print $1}')
	printf "%s\n" "${ACCESS_TOKEN}"
}

function vmcSession {
	local SESSION=$VMCSESSION
	local ONLINE=$VMCONLINE
	if [[ "$ONLINE" == "true" ]]; then
		if [ -f $SESSION ]; then
			local RUNFIND="$(find ${SESSION} -mmin +10)"
			if [ -n "$RUNFIND" ]; then
				printf "Session older than [600] seconds, reauthenticating...\n" 1>&2
				vmcLogin >"$SESSION"
			fi
		else
			printf "File [$SESSION] does not exist - authenticating...\n" 1>&2
			vmcLogin >"$SESSION"
		fi
	fi
}

function vmcGet {
	local URL=${1}
	if [[ "$VMCONLINE" == "true" ]]; then
		#STATE=$(getFile "${URL}")
		STATE="${VMCSTATE}/sddc.list.json"
		RESPONSE=$(curl -s -w "%{http_code}" -X GET \
			-H "Content-Type: application/json" \
			-H "csp-auth-token: $(cat $VMCSESSION)" \
		"$URL" 2>/dev/null)
		RESULT=$(isSuccess "${RESPONSE}")
	else
		printf "[$(ccyan "OFFLINE")] - SUCCESS\n" 1>&2
		RESULT=$(cat "${URL}")
		STATE="${URL}"
	fi
	printf "%s\n" "${RESULT}" | jq --tab . >"${STATE}"
	printf "%s\n" "${RESULT}" | jq --tab .
}

function vmcPost {
	local URL=${1}
	local BODY=${2}
	if [[ "$VMCONLINE" == "true" ]]; then
		RESPONSE=$(curl -s -w "%{http_code}" -X POST \
			-H "Content-Type: application/json" \
			-H "csp-auth-token: $(cat $VMCSESSION)" \
			-d "$BODY" \
		"$URL" 2>/dev/null)
		RESULT=$(isSuccess "${RESPONSE}")
	else
		printf "[$(ccyan "OFFLINE")] - SUCCESS\n" 1>&2
	fi
	printf "%s\n" "${RESULT}" | jq --tab .
}

function vmcDelete {
	local URL=${1}
	local BODY=${2}
	if [[ "$VMCONLINE" == "true" ]]; then
		#STATE=$(getFile "${URL}")
		RESPONSE=$(curl -s -w "%{http_code}" -G -X DELETE \
			-H "Content-Type: application/json" \
			-H "csp-auth-token: $(cat $VMCSESSION)" \
			--data-urlencode "$BODY" \
		"$URL" 2>/dev/null)
		RESULT=$(isSuccess "${RESPONSE}")
	else
		printf "[$(ccyan "OFFLINE")] - SUCCESS\n" 1>&2
	fi
	#work out state synch for deletes
	printf "%s\n" "${RESULT}" | jq --tab .
}

function getFile {
	local ENDPOINT=${1}
	local STATE="state.default"
	case "${ENDPOINT}" in
		*"vm"*)
			REGEX='vm/([^\/]+)/([^\/]+)$'
			if [[ ${ENDPOINT} =~ $REGEX ]]; then
				local ITEMID=${BASH_REMATCH[1]}
				local ITEMCM=${BASH_REMATCH[2]}
				STATE="state.vm.${ITEMID}.${ITEMCM}.json"
			else
				STATE="state.vm.json"
			fi
		;;
		*"cluster"*)
			STATE="state.cluster.json"
		;;
		*"network"*)
			STATE="state.network.json"
		;;
		*"host"*)
			STATE="state.host.json"
		;;
		*"datastore"*)
			STATE="state.datastore.json"
		;;
	esac
	printf "${VMCSTATE}/$STATE"
}

function buildURL {
	local ENDPOINT="${1}"
	local BASE="https://vmc.vmware.com/vmc/api/"
	if [[ "$VMCONLINE" == "true" ]]; then
		vmcSession
		URL="$BASE$ENDPOINT"
	else
		URL=$(getFile "${ENDPOINT}")
	fi
	printf "$URL"
}
